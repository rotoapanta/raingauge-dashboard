"""
models.py

Data models for the Raingauge Dashboard backend.
Defines the main tables: Device, MetricHistory, User, and Alert.

Modelos de datos para el backend de Raingauge Dashboard.
Define las tablas principales: Device, MetricHistory, User y Alert.
"""

from sqlmodel import SQLModel, Field
from typing import Optional
from datetime import datetime

class Device(SQLModel, table=True):
    """
    Represents a registered device (Raspberry Pi) in the system.
    Representa un dispositivo registrado (Raspberry Pi) en el sistema.
    """
    id: Optional[int] = Field(default=None, primary_key=True)
    name: Optional[str] = Field(default=None, description="Device name")
    ip: str = Field(description="Device IP address")
    description: Optional[str] = Field(default=None, description="Optional description ")
    enabled: bool = Field(default=True, description="Whether the device is enabled")

class MetricHistory(SQLModel, table=True):
    """
    History of metrics reported by a device.
    Historial de métricas reportadas por un dispositivo.
    """
    id: Optional[int] = Field(default=None, primary_key=True)
    device_id: int = Field(foreign_key="device.id", description="Associated device ID")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="Metric timestamp")
    cpu: Optional[float] = Field(default=None, description="CPU usage (%)")
    ram: Optional[float] = Field(default=None, description="RAM usage (%)")
    disk: Optional[float] = Field(default=None, description="Disk usage (%)")
    temp: Optional[float] = Field(default=None, description="Temperature (°C)")
    status: Optional[str] = Field(default=None, description="Reported status")

class User(SQLModel, table=True):
    """
    System user with role and credentials.
    Usuario del sistema con rol y credenciales.
    """
    id: Optional[int] = Field(default=None, primary_key=True)
    username: str = Field(description="Unique username")
    email: Optional[str] = Field(default=None, description="Email address")
    role: str = Field(default="user", description="User role: 'admin' or 'user'")
    password_hash: Optional[str] = Field(default=None, description="Password hash for local login")

class Alert(SQLModel, table=True):
    """
    Alert generated by a status change or relevant event on a device.
    Alerta generada por un cambio de estado o evento relevante en un dispositivo.
    """
    id: Optional[int] = Field(default=None, primary_key=True)
    device_id: int = Field(foreign_key="device.id", description="Associated device ID")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="Alert timestamp")
    level: str = Field(description="Alert level: CRITICAL, WARNING, INFO")
    message: str = Field(description="Alert message")
    resolved: bool = Field(default=False, description="Whether the alert has been resolved")
    sent_to_telegram: bool = Field(default=False, description="Whether the alert was sent to Telegram")
